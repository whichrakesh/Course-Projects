Understanding network delays through wireshark (60 mins)
This lab will  further reinforce concepts we discussed during  the tutorial session on Tuesday 4th of Aug. Try to relate that discussion to this activity.
You’ve been given two packet traces - traceRemote.pcap and traceLocal.pcap
Both traces are downloading the same file in two different scenarios.
traceRemote.pcap
Filter the trace on ip address  128.208.3.226 - this is the server from which the file is being downloaded.
A: What is the client IP address?    10.129.5.166
A: What is the application layer protocol being used for the download? HTTP
You should find packets related to the opening of a TCP connection right in the beginning. For the  connection, there is a “handshake” happening:
Client sends SYN (“Hello, I want to open a connection”)
Server sends ACK & SYN (“Fine with me, and I also want to open a connection”)
Client replies with an ACK (“OK, Great!”)
Estimate the time elapsed between sending a SYN on the connection and getting an ACK back on that connection. This is a good estimate of the round trip time between this pair of source and destination.
A: Round trip time 1 -  0.252208 s

The server from which the file is being downloaded is situated in Seattle, the client in Mumbai. The distance from Mumbai to Seattle (one-way) is 12500 km. What is the round trip propagation delay expected at propagation speed of 2 X 10^8 m/s?
A: 0.125s
How much higher is the estimated RTT ? What do you think accounts for this difference?
A: 0.127208s. The difference is due to transmission delay, queueing delay and processing delay.
After getting the “SYN, ACK” from the server, the client sends an ACK - what was the time elapsed between these two events? Among the delays you have learnt, what delay(s) might this elapsed time represent?
A: 0.000037s. The difference is due to processing delay and queuing delay because of packets from other application.
What is the time elapsed from starting of the connection request to getting the first packet of the file?
A: 0.506101s.
Scroll down to find the packet that looks like the last packet of the file. What is the elapsed time from getting the FIRST packet of the file to the LAST packet of the file?
A: 10.508929s.
How much data was transferred for the file (estimate of the file size) ? Hint: the “acknowledgement” field from client to server states the number of bytes it has received + 1.
A: 902992 bytes
What was the download data rate once file download started?
A: 85.926 KB/s
What was time taken from the beginning of the connection to getting the complete file (not end of connection)
A: 11.015030s
What is the effective data rate for downloading the whole file  
(data transferred /time from starting the connection to getting the file)
A: 81.978KB/s
What is your observation regarding download data rate vs effective data rate?
A:Download rate is more than effective data rate due to the addition of handshaking time with the download time

What was time taken from the beginning of the connection to end of connection?
A: 11.267854s

##########---------------------------------------------------------------------------------------------####################################
traceLocal.pcap
Repeat the above analysis for this trace. Note that the physical distance between client and server here is < 1km.  Server IP is 10.105.1.3
For the traceLocal.pcap:
What is the client IP address?    
A: 10.129.1.70

What is the application layer protocol being used for the download?
A: HTTP

Estimate the time elapsed between sending a SYN on the connection and getting an ACK back on that connection. This is a good estimate of the round trip time between this pair of source and destination.
A: Round trip time: 0.000537 seconds

What is the round trip propagation delay expected at propagation speed of 2 X 10^8 m/s?
A: 10^-5 seconds.

How much higher is the estimated RTT ? What do you think accounts for this difference?
A: 0.000527 s.

After getting the “SYN, ACK” from the server, the client sends an ACK - what was the time elapsed between these two events? Among the delays you have learnt, what delay(s) might this elapsed time represent?
A: 0.000028 s, It should represent the transmission and processing delays.

What is the time elapsed from starting of the connection request to getting the first packet of the file?
A:0.001176 s.

Scroll down to find the packet that looks like the last packet of the file. What is the elapsed time from getting the FIRST packet of the file to the LAST packet of the file?
A: 0.0803548 s. Assuning that the "HTTP/1.1 200 OK" message to be the last packet of the file.

How much data was transferred for the file (estimate of the file size) ? Hint: the “acknowledgement” field from client to server states the number of bytes it has received + 1.
A:903047 byte

What was the download data rate once file download started?
A: 11238245.88 B/s

What was time taken from the beginning of the connection to getting the complete file (not end of connection)
A: 0.081531 s.

What is the effective data rate for downloading the whole file ?
Ans: 903046.9 B/s
(data transferred /time from starting the connection to getting the file)

What is your observation regarding download data rate vs effective data rate?
A: Download rate is more than effective rate, it is because of the time taken for initial handshake.

What was time taken from the beginning of the connection to end of connection?
A: 0.0826 s.


What were the differences between these two downloads? (Stick only to differences from delays and rates point of view, not addresses/routes/next hops etc)
A: The propagation delay is very high in remote server as compare to the local server which in turn result in very high propagation to the client.

##########---------------------------------------------------------------------------------------------####################################
Introduction to ns (Network Simulator) [60 mins]
Go through these slides  first.  
Create an ns script and run it, and try a few simple “what-ifs”..
Go through the following ns2 tutorial by Mark Greis
In this section, you are going to develop a Tcl script for ns which simulates a simple topology. You are going to learn how to set up nodes and links, how to send data from one node to another, how to monitor a queue and how to start nam from your simulation script to visualize your simulation.

How to start
Now we are going to write a 'template' that you can use for all of the first Tcl scripts. You can write your Tcl scripts in any text editor.  Open a file lab02.tcl.
Now read, understand, and start typing as instructed
First of all, you need to create a simulator object. This is done with the command
set ns [new Simulator]
Now we open a file for writing that is going to be used for the nam trace data.
set nf [open out.nam w]
$ns namtrace-all $nf
Open a file for creating an ascii trace file
set f [open simple.tr w]
$ns trace-all $f
The first line opens the file 'out.nam' for writing and gives it the file handle 'nf'. In the second line we tell the simulator object that we created above to write all simulation data that is going to be relevant for nam into this file.
The next step is to add a 'finish' procedure that closes the trace file and starts nam.
proc finish {} {
       global ns nf
       $ns flush-trace
       close $nf
       exec nam out.nam &
       exit 0
}
You don't really have to understand all of the above code yet. It will get clearer to you once you see what the code does.
The next line tells the simulator object to execute the 'finish' procedure after 5.0 seconds of simulation time.
$ns at 5.0 "finish"
You probably understand what this line does just by looking at it. ns provides you with a very simple way to schedule events with the 'at' command.
The last line finally starts the simulation.
$ns run


You can actually save the file now and try to run it with 'ns lab02.tcl'. You are going to get an error message like 'nam: empty trace file out.nam' though, because until now we haven't defined any objects (nodes, links, etc.) or events.

Two nodes, one link
In this section we are going to define a very simple topology with two nodes that are connected by a link. The following two lines define the two nodes. (Note: You have to insert the code in this section before the line '$ns run', or even better, before the line '$ns at 5.0 "finish"').
set n0 [$ns node]
set n1 [$ns node]
A new node object is created with the command '$ns node'. The above code creates two nodes and assigns them to the handles 'n0' and 'n1'.
The next line connects the two nodes.
$ns duplex-link $n0 $n1 1Mb 10ms DropTail
This line tells the simulator object to connect the nodes n0 and n1 with a duplex link with the bandwidth 1Megabit, a delay of 10ms and a DropTail queue.
Add a queue limit to this link:
$ns queue-limit $n0 $n1 20
This means that 20 packets can be waiting to be transmitted at this link.
Now you can save your file and start the script with 'ns example1.tcl'. nam will be started automatically and you should see an output that resembles the picture below.


Sending data
Of course, this example isn't very satisfying yet, since you can only look at the topology, but nothing actually happens, so the next step is to send some data from node n0 to node n1. In ns, data is always being sent from one 'agent' to another. So the next step is to create an agent object that sends data from node n0, and another agent object that receives the data on node n1.
#Create a UDP agent and attach it to node n0
set udp0 [new Agent/UDP]
$ns attach-agent $n0 $udp0

# Create a CBR traffic source and attach it to udp0
set cbr0 [new Application/Traffic/CBR]
$cbr0 set packetSize_ 500
$cbr0 set interval_ 0.005
$cbr0 attach-agent $udp0
These lines create a UDP agent and attach it to the node n0, then attach a CBR traffic generator to the UDP agent. CBR stands for 'constant bit rate'. Line 7 and 8 should be self-explaining. The packetSize is being set to 500 bytes and a packet will be sent every 0.005 seconds (i.e. 200 packets per second).
The next lines create a Null agent which acts as traffic sink and attach it to node n1.
set null0 [new Agent/Null]
$ns attach-agent $n1 $null0
Now the two agents have to be connected with each other.
$ns connect $udp0 $null0
And now we have to tell the CBR agent when to send data and when to stop sending. Note: It's probably best to put the following lines just before the line '$ns at 5.0 "finish"'.
$ns at 0.5 "$cbr0 start"
$ns at 4.5 "$cbr0 stop"
This code should be self-explaining again.
Now you can save the file and start the simulation again. When you click on the 'play' button in the nam window, you will see that after 0.5 simulation seconds, node 0 starts sending data packets to node 1. You might want to slow nam down then with the 'Step' slider.

I suggest that now you start some experiments with nam and the Tcl script. You can click on any packet in the nam window to monitor it, and you can also click directly on the link to get some graphs with statistics.

Run the simulation script you created, and the run the network animator. Play with nam any way you wish.
See the text trace.  See here for the interpretation of the trace.
How many packet drops do you see? (Use grep … | wc) (Write this answer this in lab02.txt) cat simple.tr | grep 'd' | wc -l
Change the simulation setup in any way you want to see some  packet drops. Try two different ways of getting packet drops. (Write this answer this in lab02.txt)
A:      Number of drops:    399991
        Reason  for drops: large packet size (500000B) and low interval between packets
        Number of drops:      320 
        Reason  for drops: large packet size (500000B)


